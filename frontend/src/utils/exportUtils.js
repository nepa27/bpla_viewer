// src/utils/exportUtils.js
import { aggregateByMonth, prepareXYChartData } from './functions';
import { addHorizontalBarChart, addVerticalBarChart } from './pptxChartUtils';

// ==============================
// 1. –û–ø—Ü–∏–∏ –¥–ª—è –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
// ==============================
export const exportOptions = [
  { value: 'all', label: '–í—Å–µ –≥—Ä–∞—Ñ–∏–∫–∏' },
  { value: 'regions', label: '–ü–æ–ª—ë—Ç—ã –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º' },
  { value: 'duration', label: '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º' },
  { value: 'monthly', label: '–ü–æ–ª—ë—Ç—ã –ø–æ –º–µ—Å—è—Ü–∞–º' },
];

// ==============================
// 2. –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–≥–ª–∞–≤–Ω—ã–π —Å–ª–∞–π–¥
// ==============================
const addTitleSlide = (pptx, date) => {
  const titleSlide = pptx.addSlide();
  titleSlide.background = { color: '002B5B' };

  titleSlide.addText('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª–µ—Ç–æ–≤', {
    x: 0.5,
    y: 2.5,
    w: '90%',
    h: 1.2,
    fontSize: 44,
    color: 'FFFFFF',
    bold: true,
    align: 'center',
    fontFace: 'Arial',
  });

  const periodText = `–ü–µ—Ä–∏–æ–¥: c ${date.from}–≥. –ø–æ ${date.to}–≥.`;
  titleSlide.addText(periodText, {
    x: 0.5,
    y: 4.0,
    w: '90%',
    h: 0.6,
    fontSize: 20,
    color: 'E0E0E0',
    align: 'center',
    fontFace: 'Arial',
  });
};

// ==============================
// 3. –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤ (–∫–∞–∂–¥–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∞–º–∞ —Å–æ–∑–¥–∞—ë—Ç pptx)
// ==============================

export const exportRegionsChart = async (chartsData, date) => {
  try {
    const { default: PptxGenJS } = await import('pptxgenjs');
    const pptx = new PptxGenJS();

    pptx.author = 'Flight Analytics System';
    pptx.company = 'Aviation Insights';
    pptx.layout = 'LAYOUT_WIDE';

    addTitleSlide(pptx, date);

    const slide = pptx.addSlide();
    slide.background = { color: 'FFFFFF' };

    const barData = prepareXYChartData(
      chartsData.flightsByRegion,
      'region',
      'count',
      '–ü–æ–ª—ë—Ç—ã –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º',
      10,
      true,
    );

    addHorizontalBarChart(slide, barData, {
      title: '–¢–æ–ø-10 —Ä–µ–≥–∏–æ–Ω–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–ª—ë—Ç–æ–≤',
      color: '#4A90E2',
    });

    pptx.writeFile({ fileName: 'flight_statistics_regions.pptx' });
    return { success: true };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ä–µ–≥–∏–æ–Ω–æ–≤:', error);
    return { success: false, error: error.message };
  }
};

export const exportDurationChart = async (chartsData, date) => {
  try {
    const { default: PptxGenJS } = await import('pptxgenjs');
    const pptx = new PptxGenJS();

    pptx.author = 'Flight Analytics System';
    pptx.company = 'Aviation Insights';
    pptx.layout = 'LAYOUT_WIDE';

    addTitleSlide(pptx, date);

    const slide = pptx.addSlide();
    slide.background = { color: 'FFFFFF' };

    const barData = prepareXYChartData(
      chartsData.flightsDurationByRegion,
      'region',
      'totalDurationMinutes',
      '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–ª—ë—Ç–æ–≤',
      10,
      true,
    );

    addHorizontalBarChart(slide, barData, {
      title: '–¢–æ–ø-10 —Ä–µ–≥–∏–æ–Ω–æ–≤ –ø–æ —Å—É–º–º–∞—Ä–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–ª—ë—Ç–æ–≤',
      color: '#50C878',
    });

    pptx.writeFile({ fileName: 'flight_statistics_duration.pptx' });
    return { success: true };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:', error);
    return { success: false, error: error.message };
  }
};

// ==============================
// 4. –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤
// ==============================
export const exportMonthlyChart = async (dailyFlights, date, regionName = '') => {
  try {
    const { default: PptxGenJS } = await import('pptxgenjs');
    const pptx = new PptxGenJS();

    pptx.author = 'Flight Analytics System';
    pptx.company = 'Aviation Insights';
    pptx.layout = 'LAYOUT_WIDE';

    regionName ? addRegionTitleSlide(pptx, regionName, date) : addTitleSlide(pptx, date);

    const slide = pptx.addSlide();
    slide.background = { color: 'FFFFFF' };

    const monthlyFlights = aggregateByMonth(dailyFlights); // –¢–µ–ø–µ—Ä—å dailyFlights - —ç—Ç–æ –º–∞—Å—Å–∏–≤
    const barData = prepareXYChartData(
      monthlyFlights,
      'monthLabel',
      'total',
      '–ü–æ–ª—ë—Ç—ã –ø–æ –º–µ—Å—è—Ü–∞–º',
      Infinity,
      false,
    );

    addHorizontalBarChart(slide, barData, {
      title: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–µ—Ç–æ–≤ –ø–æ –º–µ—Å—è—Ü–∞–º',
      color: '#FF6F61',
    });

    pptx.writeFile({
      fileName: regionName ? `flight_daily_${regionName}.pptx` : 'flight_statistics_monthly.pptx',
    });
    return { success: true };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ –º–µ—Å—è—Ü–∞–º:', error);
    return { success: false, error: error.message };
  }
};

export const exportChartsToPPTX = async (
  chartsData,
  fileName = 'flight_statistics_all.pptx',
  date,
) => {
  try {
    const { default: PptxGenJS } = await import('pptxgenjs');
    const pptx = new PptxGenJS();

    pptx.author = 'Flight Analytics System';
    pptx.company = 'Aviation Insights';
    pptx.layout = 'LAYOUT_WIDE';

    addTitleSlide(pptx, date);

    // –°–ª–∞–π–¥ 2: –†–µ–≥–∏–æ–Ω—ã
    const slide1 = pptx.addSlide();
    slide1.background = { color: 'FFFFFF' };
    const barData1 = prepareXYChartData(
      chartsData.flightsByRegion,
      'region',
      'count',
      '–ü–æ–ª—ë—Ç—ã',
      10,
      true,
    );
    addHorizontalBarChart(slide1, barData1, {
      title: '–¢–æ–ø-10 —Ä–µ–≥–∏–æ–Ω–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–ª—ë—Ç–æ–≤',
      color: '#4A90E2',
    });

    // –°–ª–∞–π–¥ 3: –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    const slide2 = pptx.addSlide();
    slide2.background = { color: 'FFFFFF' };
    const barData2 = prepareXYChartData(
      chartsData.flightsDurationByRegion,
      'region',
      'totalDurationMinutes',
      '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
      10,
      true,
    );
    addHorizontalBarChart(slide2, barData2, {
      title: '–¢–æ–ø-10 —Ä–µ–≥–∏–æ–Ω–æ–≤ –ø–æ —Å—É–º–º–∞—Ä–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–ª—ë—Ç–æ–≤',
      color: '#4A90E2',
    });

    // –°–ª–∞–π–¥ 4: –ú–µ—Å—è—Ü—ã
    const slide3 = pptx.addSlide();
    slide3.background = { color: 'FFFFFF' };
    const monthlyFlights = aggregateByMonth(chartsData.dailyFlights);
    const barData3 = prepareXYChartData(
      monthlyFlights,
      'monthLabel',
      'total',
      '–ú–µ—Å—è—Ü—ã',
      Infinity,
      false,
    );
    addHorizontalBarChart(slide3, barData3, {
      title: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–µ—Ç–æ–≤ –ø–æ –º–µ—Å—è—Ü–∞–º',
      color: '#4A90E2',
    });

    pptx.writeFile({ fileName });
    return { success: true };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤—Å–µ—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤:', error);
    return { success: false, error: error.message };
  }
};

// ==============================
// 5. –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –ø–æ —Ç–∏–ø—É
// ==============================
export const exportChartByType = async (type, chartsData, date) => {
  switch (type) {
    case 'regions':
      return exportRegionsChart(chartsData, date);
    case 'duration':
      return exportDurationChart(chartsData, date);
    case 'monthly':
      // return exportMonthlyChart(chartsData, date);
      return exportMonthlyChart(chartsData.dailyFlights, date);
    case 'all':
    default:
      return exportChartsToPPTX(chartsData, 'flight_statistics_all.pptx', date);
  }
};

// ==============================
// –ù–û–í–´–ï –û–ü–¶–ò–ò –î–õ–Ø –°–¢–†–ê–ù–ò–¶–´ –†–ï–ì–ò–û–ù–ê
// ==============================
export const exportOptionsRegion = [
  { value: 'all-region', label: '–í—Å–µ –≥—Ä–∞—Ñ–∏–∫–∏ (—Ä–µ–≥–∏–æ–Ω)' },
  { value: 'daily', label: '–ü–æ–ª—ë—Ç—ã –ø–æ –¥–∞—Ç–∞–º' },
  { value: 'duration-by-date', label: '–°—É–º–º–∞—Ä–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å' },
  { value: 'peak', label: '–ü–∏–∫–æ–≤–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞' },
  { value: 'timeofday', label: '–ü–æ —á–∞—Å–∞–º —Å—É—Ç–æ–∫' },
  { value: 'stats', label: '–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' },
];

// ==============================
// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–≥–ª–∞–≤–Ω—ã–π —Å–ª–∞–π–¥ –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞
// ==============================
const addRegionTitleSlide = (pptx, regionName, date) => {
  const titleSlide = pptx.addSlide();
  titleSlide.background = { color: '002B5B' };

  titleSlide.addText(`–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª–µ—Ç–æ–≤: ${regionName}`, {
    x: 0.5,
    y: 2.0,
    w: '90%',
    h: 1.2,
    fontSize: 36,
    color: 'FFFFFF',
    bold: true,
    align: 'center',
    fontFace: 'Arial',
  });

  const periodText = `–ü–µ—Ä–∏–æ–¥: c ${date.from}–≥. –ø–æ ${date.to}–≥.`;
  titleSlide.addText(periodText, {
    x: 0.5,
    y: 3.5,
    w: '90%',
    h: 0.6,
    fontSize: 18,
    color: 'E0E0E0',
    align: 'center',
    fontFace: 'Arial',
  });
};

// ==============================
// –≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–∫ —Ç–µ–∫—Å—Ç
// ==============================
const addStatisticsSlide = (pptx, statistics, date) => {
  const slide = pptx.addSlide();
  slide.background = { color: 'F8F9FA' };

  // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–ª–∞–π–¥–∞ (—à–∏—Ä–æ–∫–æ—Ñ–æ—Ä–º–∞—Ç–Ω—ã–π: ~13.33" x 7.5")
  const slideWidth = 13.33;
  const slideHeight = 7.5;
  const margin = 0.7; // –æ—Ç—Å—Ç—É–ø—ã —Å–æ –≤—Å–µ—Ö —Å—Ç–æ—Ä–æ–Ω (–≤ –¥—é–π–º–∞—Ö)

  const contentWidth = slideWidth - 2 * margin; // ~11.93"
  const contentX = margin; // –Ω–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –ø–æ X

  // –ó–∞–≥–æ–ª–æ–≤–æ–∫
  slide.addText('üìä –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', {
    x: contentX,
    y: margin,
    w: contentWidth,
    fontSize: 26,
    bold: true,
    color: '002B5B',
    align: 'center',
    fontFace: 'Arial',
  });

  // –ü–µ—Ä–∏–æ–¥
  const periodText = `–ü–µ—Ä–∏–æ–¥: ${date.from} ‚Äì ${date.to} –≥–≥.`;
  slide.addText(periodText, {
    x: contentX,
    y: margin + 0.4,
    w: contentWidth,
    fontSize: 16,
    color: '555555',
    align: 'center',
    italic: true,
  });

  // –î–∞–Ω–Ω—ã–µ ‚Äî –Ω–∞—á–∏–Ω–∞–µ–º –Ω–∏–∂–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ –ø–µ—Ä–∏–æ–¥–∞
  const startY = margin + 0.9; // ~1.6"
  const rowHeight = 0.7;
  const iconOffsetX = 0.0;
  const labelOffsetX = 0.7;
  const valueOffsetX = contentWidth - 2.0; // –æ—Ç—Å—Ç—É–ø —Å–ø—Ä–∞–≤–∞

  const stats = [
    { icon: '‚úàÔ∏è', label: '–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—ë—Ç–æ–≤', value: statistics.totalFlights },
    { icon: '‚è±Ô∏è', label: '–°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–ª—ë—Ç–∞', value: statistics.averageFlightDuration },
    { icon: 'üìÖ', label: '–î–Ω–µ–π –±–µ–∑ –ø–æ–ª—ë—Ç–æ–≤', value: statistics.daysWithoutFlights },
  ];

  stats.forEach((item, i) => {
    const y = startY + i * rowHeight;
    if (y + rowHeight > slideHeight - margin) return; // –∑–∞—â–∏—Ç–∞ –æ—Ç –≤—ã—Ö–æ–¥–∞ –∑–∞ –Ω–∏–∑

    // –ò–∫–æ–Ω–∫–∞
    slide.addText(item.icon, {
      x: contentX + iconOffsetX,
      y: y,
      fontSize: 22,
      color: '4A90E2',
    });

    // –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏
    slide.addText(item.label, {
      x: contentX + labelOffsetX,
      y: y + 0.05,
      w: valueOffsetX - labelOffsetX - 0.5, // —à–∏—Ä–∏–Ω–∞ –¥–æ –∑–Ω–∞—á–µ–Ω–∏—è
      fontSize: 15,
      color: '333333',
    });

    // –ó–Ω–∞—á–µ–Ω–∏–µ (—Å–ø—Ä–∞–≤–∞)
    slide.addText(String(item.value), {
      x: contentX + valueOffsetX,
      y: y,
      w: 2.0,
      fontSize: 18,
      color: '002B5B',
      bold: true,
      align: 'right',
    });
  });

  // –ü–æ–¥–ø–∏—Å—å –≤–Ω–∏–∑—É
  slide.addText('–ò—Å—Ç–æ—á–Ω–∏–∫: –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ–ª—ë—Ç–æ–≤', {
    x: contentX,
    y: slideHeight - margin + 0.1,
    w: contentWidth,
    fontSize: 10,
    color: '888888',
    align: 'center',
  });
};

// ==============================
// –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ª–∏–Ω–µ–π–Ω–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
// ==============================
const prepareLineChartData = (data, xKey, yKey, seriesName = 'Series') => {
  if (!Array.isArray(data) || data.length === 0) {
    return [{ name: seriesName, labels: [], values: [] }];
  }

  const validData = data
    .map((item) => {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ x (–¥–∞—Ç–∞)
      let xValue = item[xKey];
      if (xValue == null) return null;

      let date;
      if (xValue instanceof Date) {
        date = xValue;
      } else if (typeof xValue === 'string') {
        date = new Date(xValue);
      } else {
        return null;
      }

      if (isNaN(date.getTime())) return null;

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ y (—á–∏—Å–ª–æ)
      const yValue = item[yKey];
      if (typeof yValue !== 'number' || isNaN(yValue)) return null;

      return { date, yValue };
    })
    .filter(Boolean)
    .sort((a, b) => a.date - b.date);

  if (validData.length === 0) {
    return [{ name: seriesName, labels: [], values: [] }];
  }

  const labels = validData.map((item) =>
    item.date.toLocaleDateString('ru-RU', { day: '2-digit', month: 'short' }),
  );
  const values = validData.map((item) => item.yValue);

  return [{ name: seriesName, labels, values }];
};
// ==============================
// –≠–∫—Å–ø–æ—Ä—Ç: –ü–æ–ª—ë—Ç—ã –ø–æ –¥–∞—Ç–∞–º (–ª–∏–Ω–µ–π–Ω–∞—è)
// ==============================
export const exportDailyFlightsChart = async (regionName, dailyFlights, date) => {
  try {
    const { default: PptxGenJS } = await import('pptxgenjs');
    const pptx = new PptxGenJS();
    pptx.layout = 'LAYOUT_WIDE';
    pptx.author = 'Flight Analytics System';
    pptx.company = 'Aviation Insights';

    addRegionTitleSlide(pptx, regionName, date);

    const slide = pptx.addSlide();
    slide.background = { color: 'FFFFFF' };

    const chartData = prepareLineChartData(dailyFlights, 'date', 'count', '–ü–æ–ª—ë—Ç—ã');
    slide.addChart('line', chartData, {
      x: 0.3,
      y: 1.0,
      w: '94%',
      h: 5.5,
      title: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–µ—Ç–æ–≤ –ø–æ –¥–∞—Ç–∞–º',
      titleFontSize: 20,
      titleColor: '002B5B',
      chartColors: ['#4A90E2'],
      showValue: false,
      valAxisLabelFontSize: 10,
      catAxisLabelFontSize: 10,
    });

    pptx.writeFile({ fileName: `flight_daily_${regionName}.pptx` });
    return { success: true };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ daily:', error);
    return { success: false, error: error.message };
  }
};

// ==============================
// –≠–∫—Å–ø–æ—Ä—Ç: –ü–∏–∫–æ–≤–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ (–ª–∏–Ω–µ–π–Ω–∞—è)
// ==============================
export const exportPeakFlightsChart = async (regionName, peakHourlyFlights, date) => {
  try {
    const { default: PptxGenJS } = await import('pptxgenjs');
    const pptx = new PptxGenJS();
    pptx.layout = 'LAYOUT_WIDE';

    addRegionTitleSlide(pptx, regionName, date);

    const slide = pptx.addSlide();
    slide.background = { color: 'FFFFFF' };

    // üîπ –î–æ–±–∞–≤–ª—è–µ–º –ó–ê–ì–û–õ–û–í–û–ö –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç (–≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –≤–∏–¥–µ–Ω)
    slide.addText('–ü–∏–∫–æ–≤–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –ø–æ –¥–Ω—è–º', {
      x: 0.5,
      y: 0.5,
      w: '90%',
      fontSize: 20,
      color: '002B5B',
      bold: true,
      align: 'center',
      fontFace: 'Arial',
    });

    const chartData = prepareLineChartData(peakHourlyFlights, 'date', 'maxFlights', '–ü–∏–∫');
    slide.addChart('line', chartData, {
      x: 0.3,
      y: 1.1, // ‚Üê –Ω–µ–º–Ω–æ–≥–æ –≤—ã—à–µ, —Ç.–∫. –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–µ–ø–µ—Ä—å –æ—Ç–¥–µ–ª—å–Ω–æ
      w: '94%',
      h: 5.4,
      // –£–ë–†–ê–õ–ò –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π title ‚Äî –æ–Ω –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥—ë–∂–Ω–æ –¥–ª—è line-–≥—Ä–∞—Ñ–∏–∫–æ–≤
      chartColors: ['#FF6F61'],
      showValue: true,
      valAxisLabelFontSize: 10,
      catAxisLabelFontSize: 9,
    });

    pptx.writeFile({ fileName: `flight_peak_${regionName}.pptx` });
    return { success: true };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ peak:', error);
    return { success: false, error: error.message };
  }
};

// ==============================
// –≠–∫—Å–ø–æ—Ä—Ç: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —á–∞—Å–∞–º (–∫—Ä—É–≥–æ–≤–∞—è)
// ==============================
export const exportTimeOfDayChart = async (regionName, flightsByTimeOfDay, date) => {
  try {
    const { default: PptxGenJS } = await import('pptxgenjs');
    const pptx = new PptxGenJS();
    pptx.layout = 'LAYOUT_WIDE';

    addRegionTitleSlide(pptx, regionName, date);

    const slide = pptx.addSlide();
    slide.background = { color: 'FFFFFF' };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
    if (
      !flightsByTimeOfDay ||
      !Array.isArray(flightsByTimeOfDay) ||
      flightsByTimeOfDay.length === 0
    ) {
      console.error('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è pie-–¥–∏–∞–≥—Ä–∞–º–º—ã');
      return { success: false, error: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã' };
    }

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–µ—Ç–æ–≤ –¥–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
    const totalFlights = flightsByTimeOfDay.reduce((sum, item) => sum + item.value, 0);

    // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const chartData = [
      {
        name: '–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª–µ—Ç–æ–≤',
        labels: flightsByTimeOfDay.map((item) => {
          const percentage = ((item.value / totalFlights) * 100).toFixed(1);
          return `${item.label} (${percentage}%)`;
        }),
        values: flightsByTimeOfDay.map((item) => item.value),
      },
    ];

    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–∏–∞–≥—Ä–∞–º–º—ã
    slide.addText('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª–µ—Ç–æ–≤ –ø–æ —á–∞—Å–∞–º —Å—É—Ç–æ–∫', {
      x: 0.5,
      y: 0.3,
      w: 9,
      h: 0.5,
      fontSize: 20,
      color: '002B5B',
      bold: true,
      align: 'center',
    });

    slide.addChart('pie', chartData, {
      x: 1.5, // –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
      y: 1.5,
      w: 7.0, // –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
      h: 4.5,
      title: '',
      titleFontSize: 0,
      titleColor: '002B5B',
      showLegend: true,
      legendPos: 'r',
      chartColors: ['#4A90E2', '#50C878', '#FF6F61', '#FFD700', '#9370DB', '#FF69B4'],
      showValue: true,
      valLabelFontSize: 14,
      catLabelFontSize: 14,
      showPercent: true,
      holeSize: 0.3,
      v3D: true,
      rotationX: 15,
      rotationY: 15,
      legendFontSize: 14,
      dataLabelFontSize: 14,
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—è—Å–Ω–µ–Ω–∏–µ –ø–æ–¥ –¥–∏–∞–≥—Ä–∞–º–º–æ–π
    const explanationText = `–í—Å–µ–≥–æ –ø–æ–ª–µ—Ç–æ–≤: ${totalFlights}`;
    slide.addText(explanationText, {
      x: 0.5,
      y: 6.2,
      w: 9,
      h: 0.3,
      fontSize: 12,
      color: '666666',
      align: 'center',
    });

    pptx.writeFile({ fileName: `flight_timeofday_${regionName}.pptx` });
    return { success: true };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ time of day:', error);
    return { success: false, error: error.message };
  }
};

// ==============================
// –≠–∫—Å–ø–æ—Ä—Ç: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (—Ç–µ–∫—Å—Ç)
// ==============================
export const exportStatisticsSlide = async (regionName, statistics, date) => {
  try {
    const { default: PptxGenJS } = await import('pptxgenjs');
    const pptx = new PptxGenJS();
    pptx.layout = 'LAYOUT_WIDE';

    // –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω —Å–ª–∞–π–¥ ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–±–µ–∑ –æ–±—â–µ–≥–æ –∑–∞–≥–ª–∞–≤–Ω–æ–≥–æ)
    addStatisticsSlide(pptx, statistics, date);

    pptx.writeFile({ fileName: `flight_statistics_${regionName}.pptx` });
    return { success: true };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    return { success: false, error: error.message };
  }
};

// ==============================
// –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Ä–µ–≥–∏–æ–Ω–∞
// ==============================
export const exportAllRegionCharts = async (
  regionName,
  { dailyFlights, peakHourlyFlights, flightsByTimeOfDay, statistics, flightData },
  date,
) => {
  if (!statistics) {
    console.warn('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
    return { success: false, error: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏' };
  }
  console.log({ dailyFlights, peakHourlyFlights, flightsByTimeOfDay, statistics, flightData });
  try {
    const { default: PptxGenJS } = await import('pptxgenjs');
    const pptx = new PptxGenJS();
    pptx.layout = 'LAYOUT_WIDE';

    addRegionTitleSlide(pptx, regionName, date);
    addStatisticsSlide(pptx, statistics, date);

    // –°–ª–∞–π–¥: –ü–æ–ª—ë—Ç—ã –ø–æ –¥–∞—Ç–∞–º
    const slide1 = pptx.addSlide();
    slide1.background = { color: 'FFFFFF' };
    const data1 = prepareLineChartData(dailyFlights, 'date', 'count', '–ü–æ–ª—ë—Ç—ã');
    slide1.addChart('line', data1, {
      x: 0.3,
      y: 1.0,
      w: '94%',
      h: 5.5,
      title: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–µ—Ç–æ–≤ –ø–æ –¥–∞—Ç–∞–º',
      titleFontSize: 20,
      titleColor: '002B5B',
      chartColors: ['#4A90E2'],
    });

    // –°–ª–∞–π–¥: –ü–∏–∫–æ–≤–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞
    const slide2 = pptx.addSlide();
    slide2.background = { color: 'FFFFFF' };
    const data2 = prepareLineChartData(peakHourlyFlights, 'date', 'maxFlights', '–ü–∏–∫');
    slide2.addChart('line', data2, {
      x: 0.3,
      y: 1.0,
      w: '94%',
      h: 5.5,
      title: '–ü–∏–∫–æ–≤–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –ø–æ –¥–Ω—è–º',
      titleFontSize: 20,
      titleColor: '002B5B',
      chartColors: ['#FF6F61'],
    });

    // –°–ª–∞–π–¥: –°—É–º–º–∞—Ä–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ –¥–∞—Ç–∞–º
    const slide3 = pptx.addSlide();
    slide3.background = { color: 'FFFFFF' };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—É–º–º–∞—Ä–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    if (!flightData || !Array.isArray(flightData) || flightData.length === 0) {
      slide3.addText('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—É–º–º–∞—Ä–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏', {
        x: 0.5,
        y: 3.0,
        w: 9,
        h: 1.0,
        fontSize: 16,
        color: 'FF0000',
        align: 'center',
      });
    } else {
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–∞—Ç–∞–º –∏ —Å—É–º–º–∏—Ä—É–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
      const groupedData = {};

      flightData.forEach((item) => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É —ç–ª–µ–º–µ–Ω—Ç–∞ –µ—Å—Ç—å –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è
        if (item && item.date && typeof item.durationMinutes === 'number') {
          const dateString = item.date; // '2025-04-27'
          if (!groupedData[dateString]) {
            groupedData[dateString] = 0;
          }
          groupedData[dateString] += item.durationMinutes;
        }
      });

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–∞—Å—Å–∏–≤ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
      const processedData = Object.entries(groupedData).map(([date, totalDuration]) => ({
        date: date,
        totalDurationMinutes: totalDuration,
      }));

      // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
      if (processedData.length > 0) {
        const data3 = prepareLineChartData(
          processedData,
          'date',
          'totalDurationMinutes',
          '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
        );
        slide3.addChart('line', data3, {
          x: 0.3,
          y: 1.0,
          w: '94%',
          h: 5.5,
          title: '–°—É–º–º–∞—Ä–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–ª–µ—Ç–æ–≤ –ø–æ –¥–∞—Ç–∞–º',
          titleFontSize: 20,
          titleColor: '002B5B',
          chartColors: ['#50C878'],
        });
      } else {
        slide3.addText('–ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞', {
          x: 0.5,
          y: 3.0,
          w: 9,
          h: 1.0,
          fontSize: 16,
          color: 'FF0000',
          align: 'center',
        });
      }
    }

    // –°–ª–∞–π–¥: –ü–æ —á–∞—Å–∞–º —Å—É—Ç–æ–∫
    const slide4 = pptx.addSlide();
    slide4.background = { color: 'FFFFFF' };
    const pieData = flightsByTimeOfDay.map((item) => ({ name: item.label, value: item.value }));
    slide4.addChart('pie', pieData, {
      x: 2.0,
      y: 1.5,
      w: 6.0,
      h: 4.5,
      title: '–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª–µ—Ç–æ–≤ –ø–æ —á–∞—Å–∞–º —Å—É—Ç–æ–∫',
      titleFontSize: 20,
      titleColor: '002B5B',
    });

    pptx.writeFile({ fileName: `flight_all_${regionName}.pptx` });
    return { success: true };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤—Å–µ—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Ä–µ–≥–∏–æ–Ω–∞:', error);
    return { success: false, error: error.message };
  }
};

// ==============================
// –≠–∫—Å–ø–æ—Ä—Ç: –°—É–º–º–∞—Ä–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–ª–µ—Ç–æ–≤ –ø–æ –¥–∞—Ç–∞–º (–ª–∏–Ω–µ–π–Ω–∞—è)
// ==============================
export const exportDurationByDateChart = async (regionName, flightData, date) => {
  try {
    const { default: PptxGenJS } = await import('pptxgenjs');
    const pptx = new PptxGenJS();
    pptx.layout = 'LAYOUT_WIDE';
    pptx.author = 'Flight Analytics System';
    pptx.company = 'Aviation Insights';

    addRegionTitleSlide(pptx, regionName, date);

    const slide = pptx.addSlide();
    slide.background = { color: 'FFFFFF' };

    // –î–æ–±–∞–≤–ª—è–µ–º –ó–ê–ì–û–õ–û–í–û–ö –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç (–≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –≤–∏–¥–µ–Ω)
    slide.addText('–°—É–º–º–∞—Ä–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–ª–µ—Ç–æ–≤ –ø–æ –¥–∞—Ç–∞–º', {
      x: 0.5,
      y: 0.5,
      w: '90%',
      fontSize: 20,
      color: '002B5B',
      bold: true,
      align: 'center',
      fontFace: 'Arial',
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if (!flightData || !Array.isArray(flightData) || flightData.length === 0) {
      console.error('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å—É–º–º–∞—Ä–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏');
      // –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π –≥—Ä–∞—Ñ–∏–∫ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
      slide.addText('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è', {
        x: 0.5,
        y: 3.0,
        w: 9,
        h: 1.0,
        fontSize: 16,
        color: 'FF0000',
        align: 'center',
      });

      pptx.writeFile({ fileName: `flight_duration_by_date_${regionName}.pptx` });
      return { success: true };
    }

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–∞—Ç–∞–º –∏ —Å—É–º–º–∏—Ä—É–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    const groupedData = {};

    flightData.forEach((item) => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É —ç–ª–µ–º–µ–Ω—Ç–∞ –µ—Å—Ç—å –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è
      if (item && item.date && typeof item.durationMinutes === 'number') {
        const dateString = item.date; // '2025-04-27'
        if (!groupedData[dateString]) {
          groupedData[dateString] = 0;
        }
        groupedData[dateString] += item.durationMinutes;
      }
    });

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–∞—Å—Å–∏–≤ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
    const processedData = Object.entries(groupedData).map(([date, totalDuration]) => ({
      date: date,
      totalDurationMinutes: totalDuration,
    }));

    // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    if (processedData.length === 0) {
      console.error('–ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞');
      slide.addText('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è', {
        x: 0.5,
        y: 3.0,
        w: 9,
        h: 1.0,
        fontSize: 16,
        color: 'FF0000',
        align: 'center',
      });

      pptx.writeFile({ fileName: `flight_duration_by_date_${regionName}.pptx` });
      return { success: true };
    }

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ª–∏–Ω–µ–π–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
    const chartData = prepareLineChartData(
      processedData,
      'date',
      'totalDurationMinutes',
      '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
    );

    slide.addChart('line', chartData, {
      x: 0.3,
      y: 1.1, // –°–ª–µ–≥–∫–∞ –≤—ã—à–µ, —á—Ç–æ–±—ã —É–º–µ—Å—Ç–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫
      w: '94%',
      h: 5.4,
      // –£–ë–†–ê–õ–ò –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π title ‚Äî –æ–Ω –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥—ë–∂–Ω–æ –¥–ª—è line-–≥—Ä–∞—Ñ–∏–∫–æ–≤
      chartColors: ['#50C878'],
      showValue: true,
      valAxisLabelFontSize: 10,
      catAxisLabelFontSize: 9,
    });

    pptx.writeFile({ fileName: `flight_duration_by_date_${regionName}.pptx` });
    return { success: true };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ duration by date:', error);
    return { success: false, error: error.message };
  }
};

// ==============================
// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞
// ==============================
export const exportRegionChartByType = async (type, regionName, chartsData, date) => {
  const { dailyFlights, peakHourlyFlights, flightsByTimeOfDay, statistics, flightData } =
    chartsData;

  switch (type) {
    case 'daily':
      return exportMonthlyChart(dailyFlights, date, regionName);
    case 'peak':
      return exportPeakFlightsChart(regionName, peakHourlyFlights, date);
    case 'timeofday':
      return exportTimeOfDayChart(regionName, flightsByTimeOfDay, date);
    case 'duration-by-date':
      return exportDurationByDateChart(regionName, flightData, date);
    case 'stats':
      return exportStatisticsSlide(regionName, statistics, date);
    case 'all-region':
    default:
      return exportAllRegionCharts(regionName, chartsData, date);
  }
};
